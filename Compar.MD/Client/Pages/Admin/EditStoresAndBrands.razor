@page "/stores"
@layout AdminLayout
@inject HttpClient httpClient

<MudGrid>
    <MudItem md="4">
        <MudText>Tipul produselor existente : </MudText>

        @if (productTypes is null || !productTypes.Any())
        {
            <MudAlert Class="pa-4 mt-6" Severity="Severity.Error">Nu exista tipuri de produse la moment.</MudAlert>
        }
        else
        {
            <MudTable Elevation="3" Class="pa-4 mt-6" Items="@productTypes" Height="400px">
                <ColGroup>
                    <col style="width: 80%;" />
                    <col />
                    <col />
                </ColGroup>
                <RowTemplate>
                    <MudTd DataLabel="Nr">@context.ProductTypeName</MudTd>
                    <MudTd DataLabel="Nr"><MudButton Color="Color.Error" OnClick="@((e) => DeleteProductType(context.Id))">Sterge</MudButton></MudTd>
                </RowTemplate>
            </MudTable>
        }

        <MudGrid>
            <MudItem md="12" Class="mt-4">
                <MudText>Adauga tipul produsului nou : </MudText>
            </MudItem>

            <MudItem md="8">
                <MudPaper Elevation="3" Class="pa-2">
                    <MudTextField T="string" @bind-Value="newProductType.ProductTypeName" Label="Tipul produsului" />
                </MudPaper>
            </MudItem>
            <MudItem md="4">
                <MudButton Class="mt-4" Variant="Variant.Filled" Color="Color.Primary" OnClick="AddNewProductType">Adauga</MudButton>
            </MudItem>
        </MudGrid>
</MudItem>

<MudItem md="4">
        <MudText>Branduri existente : </MudText>

    @if (brands is null || !brands.Any())
    {
        <MudAlert Class="pa-4 mt-6" Severity="Severity.Error">Nu exista branduri la moment.</MudAlert>
    }
    else
    {
        <MudTable Elevation="3" Class="pa-4 mt-6" Items="@brands" Height="400px">
            <ColGroup>
                <col style="width: 80%;" />
                <col />
                <col />
            </ColGroup>
            <RowTemplate>
                <MudTd DataLabel="Nr">@context.BrandName</MudTd>
                    <MudTd DataLabel="Nr"><MudButton Color="Color.Error" OnClick="@((e) => DeleteBrand(context.Id))">Sterge</MudButton></MudTd>
            </RowTemplate>
        </MudTable>
    }

        <MudGrid>
            <MudItem md="12" Class="mt-4">
                <MudText>Adauga brand nou : </MudText>
            </MudItem>
            
            <MudItem md="8">
                <MudPaper Elevation="3" Class="pa-2">
                    <MudTextField T="string" @bind-Value="newBrand.BrandName" Label="Brand" />
                </MudPaper>
            </MudItem>
            <MudItem md="4">
                <MudButton Class="mt-4" Variant="Variant.Filled" Color="Color.Primary" OnClick="AddNewBrand">Adauga</MudButton>
            </MudItem>
        </MudGrid>   
</MudItem>

<MudItem md="4">
        <MudText>Magazine existente : </MudText>

        @if (stores is null || !stores.Any())
    {
        <MudAlert Class="pa-4 mt-6" Severity="Severity.Error">Nu exista magazine la moment.</MudAlert>
    }
    else
    {
            <MudTable Elevation="3" Class="pa-4 mt-6" Items="@stores" Height="400px">
            <ColGroup>
                <col style="width: 80%;" />
                <col />
                <col />
            </ColGroup>
            <RowTemplate>
                <MudTd DataLabel="Nr">@context.StoreName</MudTd>
                    <MudTd DataLabel="Nr"><MudButton Color="Color.Error" OnClick="@((e)=> DeleteStore(context.Id))">Sterge</MudButton></MudTd>
            </RowTemplate>
        </MudTable>
    }

        <MudGrid>
            <MudItem md="12" Class="mt-4">
                <MudText>Adauga magazin nou : </MudText>
            </MudItem>

            <MudItem md="8">
                <MudPaper Elevation="3" Class="pa-2">
                    <MudTextField T="string" @bind-Value="newStore.StoreName" Label="Magazin" />
                </MudPaper>
            </MudItem>
            <MudItem md="4">
                <MudButton Class="mt-4" Variant="Variant.Filled" Color="Color.Primary" OnClick="AddNewStore">Adauga</MudButton>
            </MudItem>
        </MudGrid>
</MudItem>

    
</MudGrid>
@code {
    private IEnumerable<StoreDto> stores;
    private IEnumerable<BrandDto> brands;
    private IEnumerable<ProductTypeDto> productTypes;
    private StoreDto newStore = new();
    private BrandDto newBrand = new();
    private ProductTypeDto newProductType = new();

    protected override async Task OnInitializedAsync()
    {
        await GetStores();
        await GetBrands();
        await GetProductTypes();

        StateHasChanged();

        await base.OnInitializedAsync();
    }

    public async Task GetStores() => stores = await this.httpClient.GetFromJsonAsync<List<StoreDto>>("api/stores");
    public async Task GetBrands() => brands = await this.httpClient.GetFromJsonAsync<List<BrandDto>>("api/brands");
    public async Task GetProductTypes() => productTypes = await this.httpClient.GetFromJsonAsync<List<ProductTypeDto>>("api/productTypes");


    private async Task AddNewBrand()
    {
        if (!string.IsNullOrEmpty(newBrand.BrandName))
        {
            await httpClient.PostAsJsonAsync("api/brands", newBrand);
            await GetBrands();

            newBrand = new();
            StateHasChanged();
        }
    }

    public async Task DeleteBrand(string brandId)
    {
        var result = await httpClient.PostAsJsonAsync("api/brands/delete", brandId);

        if (result.IsSuccessStatusCode)
        {
            await GetBrands();
            StateHasChanged();
        }
    }


    private async Task AddNewStore()
    {
        if (!string.IsNullOrEmpty(newStore.StoreName))
        {
            await httpClient.PostAsJsonAsync("api/stores", newStore);
            await GetStores();

            newStore = new();
            StateHasChanged();
        }
    }

    public async Task DeleteStore(string storeId)
    {
        var result = await httpClient.PostAsJsonAsync<string>("api/stores/delete", storeId);

        if (result.IsSuccessStatusCode)
        {
            await GetStores();
            StateHasChanged();
        }
    }

    private async Task AddNewProductType()
    {
        if (!string.IsNullOrEmpty(newProductType.ProductTypeName))
        {
            await httpClient.PostAsJsonAsync("api/productTypes", newProductType);
            await GetProductTypes();

            newProductType = new();
            StateHasChanged();
        }
    }

    public async Task DeleteProductType(string productTypeId)
    {
        var result = await httpClient.PostAsJsonAsync<string>("api/productTypes/delete", productTypeId);

        if (result.IsSuccessStatusCode)
        {
            await GetProductTypes();
            StateHasChanged();
        }
    }
}

