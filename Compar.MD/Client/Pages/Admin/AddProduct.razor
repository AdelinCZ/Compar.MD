@page "/add-product"
@layout AdminLayout
@inject HttpClient httpClient

<MudGrid>
    <MudItem md="4">
        <MudText>Adauga produs nou : </MudText>

        <MudPaper Elevation="3" Class="pa-4 mt-4">

            <MudTextField T="string" @bind-Value="newProduct.Name" Label="Denumirea produsului" />

            <MudSelect @bind-Value="newProduct.ProductType" T="string" Label="Tipul produsului" AnchorOrigin="Origin.BottomCenter" >
                @foreach (var productType in ProductTypes)
                {
                    <MudSelectItem Value="productType.ProductTypeName" />
                }
            </MudSelect> 
        
            <MudSelect @bind-Value="newProduct.ProductBrand" T="string" Label="Brandul produsului" AnchorOrigin="Origin.BottomCenter">
                @foreach (var brand in Brands)
                {
                    <MudSelectItem Value="brand.BrandName" />
                }
            </MudSelect>

            <MudTextField T="string" @bind-Value="newProduct.ImageURL" Label="URL-ul imaginii" />

            <MudGrid Class="mt-4">
                <MudItem md="12">
                    <MudText>Cele mai bune preturi disponibile : </MudText>
                </MudItem>

                @foreach(var newPrice in newProduct.Prices)
                {
                    <MudItem md="6">
                        <MudSelect @bind-Value="newPrice.SupplierName" T="string" Label="Distribuitor" AnchorOrigin="Origin.BottomCenter">
                            @foreach (var store in Stores)
                            {
                                    <MudSelectItem Value="store.StoreName" />
                            }
                        </MudSelect>
                    </MudItem>

                    <MudItem md="6">
                        <MudNumericField HideSpinButtons="true" @bind-Value="newPrice.Price" Variant="Variant.Outlined" Step=".2M" />
                    </MudItem>
                }
            </MudGrid>

        </MudPaper>

        <MudButton Class="mt-4" Variant="Variant.Filled" Color="Color.Primary" OnClick="AddNewProduct">Adauga Produs</MudButton>

    </MudItem>
</MudGrid>

@code{
    public ProductDto newProduct = new() { Prices = new() { new(), new(), new(), new() } };
    public List<StoreDto> Stores = new();
    public List<BrandDto> Brands = new();
    public List<ProductTypeDto> ProductTypes = new();


    protected override async Task OnInitializedAsync()
    {

        Stores = await this.httpClient.GetFromJsonAsync<List<StoreDto>>("api/stores");
        Brands = await this.httpClient.GetFromJsonAsync<List<BrandDto>>("api/brands");
        ProductTypes = await this.httpClient.GetFromJsonAsync<List<ProductTypeDto>>("api/productTypes");

        await base.OnInitializedAsync();
    }

    public async Task AddNewProduct()
    {
        if (!newProduct.Prices.Any(x => x.Price == 0) && !newProduct.Prices.Any(x => string.IsNullOrEmpty(x.SupplierName)))
        {
            var result = await httpClient.PostAsJsonAsync("api/products", newProduct);

            if (result.IsSuccessStatusCode)
            {
                newProduct = new() { Prices = new() { new(), new(), new(), new() } };
                StateHasChanged();
            }
        }
    }

}